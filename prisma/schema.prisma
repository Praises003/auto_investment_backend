// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(uuid())
  fullName         String
  phoneNumber      String             @unique
  email            String             @unique
  password         String
  is2FAEnabled     Boolean            @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  profile          UserProfile?
  portfolio        Portfolio[]
  transactions     Transaction[]
  referrals        Referral[]
  DividendStrategy DividendStrategy[]
  WatchlistItem    WatchlistItem[]
  Goal             Goal[]
  recurringPayment RecurringPayment?
}

model UserProfile {
  id              String    @id @default(uuid())
  userId          String    @unique
  address         String?
  city            String?
  region          String?
  country         String?
  postalCode      String?
  dob             DateTime?
  employment      String?
  annualIncome    Int?
  institutionName String?
  expectedDeposit Int?
  sourceOfFunds   String?
  idImage         String? // <-- URL or path to the uploaded ID image

  profession     String?
  emergencyName  String?
  emergencyPhone String?
  kycStatus      String  @default("pending")
  user           User    @relation(fields: [userId], references: [id])
}

enum InvestmentMode {
  ACTIVE_INVESTMENT
  AUTO_INVESTMENT
}

model Portfolio {
  id                String             @id @default(uuid())
  userId            String
  goal              String
  riskLevel         String
  autoInvest        Boolean
  investmentMode    InvestmentMode     @default(AUTO_INVESTMENT) // <-- new enum field
  createdAt         DateTime           @default(now())
  user              User               @relation(fields: [userId], references: [id])
  InvestmentProfile InvestmentProfile?
}

model Transaction {
  id     String   @id @default(uuid())
  userId String
  symbol String
  type   String // buy/sell
  amount Float
  date   DateTime @default(now())
  user   User     @relation(fields: [userId], references: [id])
}

model Referral {
  id            String @id @default(uuid())
  userId        String
  code          String @unique
  referralsMade Int    @default(0)
  bonusReceived Float  @default(0)
  user          User   @relation(fields: [userId], references: [id])
}

model DividendStrategy {
  id          String @id @default(uuid())
  name        String
  description String
  userId      String
  user        User   @relation(fields: [userId], references: [id])
}

model WatchlistItem {
  id     String @id @default(uuid())
  userId String
  symbol String
  user   User   @relation(fields: [userId], references: [id])
}

model Goal {
  id        String   @id @default(uuid())
  userId    String
  category  String
  target    Float
  progress  Float
  achieved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

enum InvestmentObjective {
  FIXED_INCOME
  BALANCED
  GROWTH
}

enum KnowledgeLevel {
  NONE
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum InvestmentHorizon {
  LESS_THAN_1_YEAR
  ONE_TO_TWO_YEARS
  THREE_TO_FOUR_YEARS
  FIVE_PLUS_YEARS
}

model InvestmentProfile {
  id                String              @id @default(uuid())
  portfolioId       String              @unique
  objective         InvestmentObjective
  knowledgeLevel    KnowledgeLevel
  investmentHorizon InvestmentHorizon
  createdAt         DateTime            @default(now())
  portfolio         Portfolio           @relation(fields: [portfolioId], references: [id])
}

model StockPrice {
  id     String   @id @default(uuid())
  symbol String
  price  Float
  date   DateTime

  @@unique([symbol, date], name: "symbol_date")
}

enum Frequency {
  WEEKLY
  BIWEEKLY
  MONTHLY
}

enum WeekType {
  ODD
  EVEN
}

model RecurringPayment {
  id         String    @id @default(uuid())
  userId     String    @unique
  type       Frequency
  weekType   WeekType? // only applicable for BIWEEKLY
  startDate  DateTime // first deduction date
  dayOfMonth Int? // for monthly payments (1-31)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
}
